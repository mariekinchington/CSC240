
import kagglehub
import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OrdinalEncoder
from sklearn.naive_bayes import CategoricalNB
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

# Download dataset from Kaggle
path = kagglehub.dataset_download("saurabhshahane/road-traffic-accidents")
print("Path to dataset files:", path)

# Load CSV file from downloaded dataset
for file in os.listdir(path):
    if file.endswith(".csv"):
        data = pd.read_csv(os.path.join(path, file))
        break

# View the first few rows
print(data.head())

# Drop irrelevant or sparse columns (modify as needed for your version of the dataset)
columns_to_drop = [
    'Time', 'Service_year_of_vehicle', 'Defect_of_vehicle', 'Work_of_casuality',
    'Fitness_of_casuality', 'Educational_level', 'Owner_of_vehicle', 'Type_of_vehicle',
    'Sex_of_casualty', 'Age_band_of_casualty', 'Casualty_severity', 'Casualty_class'
]
data.drop(columns=[col for col in columns_to_drop if col in data.columns], inplace=True)

# Drop rows with missing values
data.dropna(inplace=True)

# Separate features and target
X = data.drop("Accident_severity", axis=1)
y = data["Accident_severity"]

# Encode categorical features
encoder = OrdinalEncoder()
X_encoded = encoder.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X_encoded, y, test_size=0.2, random_state=42
)

# Train Naive Bayes model
model = CategoricalNB()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
conf_matrix = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Output results
print("\nConfusion Matrix:\n", conf_matrix)
print("\nAccuracy:", accuracy)
print("\nClassification Report:\n", report)

